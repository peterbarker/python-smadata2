#! /usr/bin/env python
#
# sma2-upload-to-pvoutputorg - Upload generation history to pvoutput.org
# Copyright (C) 2014 Peter Barker <pb-sma2@barker.dropbear.id.au>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

from __future__ import print_function

import argparse
import datetime
from datetime import date
import sys
import time

import smadata2.protocol
import smadata2.util
import smadata2.config
import smadata2.db
import smadata2.pvoutputuploader

def getmissing(args):
    config = smadata2.config.SMAData2Config()
    db = config.database()

    for system in config.systems():
        mypvoutput = config.pvoutput_connect(system)
        uploader = smadata2.pvoutputuploader.PVOutputUploader(db, system,
                                                              mypvoutput)
        uploader.setVerbose(1)
        
        allmissing = uploader.getmissing(args.fromdate.somedate, args.todate.somedate)
        for missing in allmissing:
            print(missing)

def getstatus(args):
    config = smadata2.config.SMAData2Config()
    db = config.database()

    for system in config.systems():
        mypvoutput = config.pvoutput_connect(system)
        uploader = smadata2.pvoutputuploader.PVOutputUploader(db, system,
                                                              mypvoutput)
        uploader.setVerbose(1)
        if args.fromdate:
            fromdatetime = args.fromdate.somedatetime;
        else:
            fromdatetime = None

        allstatus = uploader.getstatus(fromdatetime, 1)
        for status in allstatus:
            print(status)

def upload_unuploaded(args):
    config = smadata2.config.SMAData2Config()
    db = config.database()

    for system in config.systems():
        mypvoutput = config.pvoutput_connect(system)
        uploader = smadata2.pvoutputuploader.PVOutputUploader(db, system,
                                                              mypvoutput)
        uploader.setVerbose(1)
        
        print("Uploading unuploaded statuses for %s" % (system.name))
        uploader.upload_unuploaded_statuses()

def addoutput(args):
    config = smadata2.config.SMAData2Config()
    db = config.database()

    mypvoutput = config.pvoutput_connect(args.sid.system)
    uploader = smadata2.pvoutputuploader.PVOutputUploader(db,
                                                          args.sid.system,
                                                          mypvoutput)
    uploader.setVerbose(1)
        
    print("Uploading unuploaded statuses for %s" % args.sid.system)
    uploader.addoutput(args.fordate.somedate, args.generated)


class dateType():
    def __init__(self, param):
        self.somedate = datetime.datetime.strptime(param, '%Y%m%d')

    def __call__(self):
        print("__called__ called on dateType?!")

class datetimeType():
    def __init__(self, param):
        self.somedatetime = datetime.datetime.strptime(param, '%Y%m%d %H:%M')

    def __call__(self):
        print("__called__ called on datetimeType?!")

class sidType():
    def __init__(self, param):
        config = smadata2.config.SMAData2Config()
        self.system = None
        for system in config.systems():
            if str(system.pvoutput_sid) == str(param):
                self.system = system
                break
        if self.system is None:
            fatal("sid not found")

    def __call__(self):
        print("__called__ called on datetimeType?!")

parser = argparse.ArgumentParser(description='Work with pvoutput and smadata')
subparsers = parser.add_subparsers()

uu_parser = subparsers.add_parser('upload-unuploaded')
uu_parser.set_defaults(func=upload_unuploaded)

getmissing_parser = subparsers.add_parser(
    'get-missing',
    help="Get missing daily production dates")
getmissing_parser.add_argument('--from', type=dateType, dest='fromdate')
getmissing_parser.add_argument('--to', type=dateType, dest='todate')
getmissing_parser.set_defaults(func=getmissing)

getstatus_parser = subparsers.add_parser(
    'get-status',
    help='Get live status of system')
getstatus_parser.add_argument('--from', type=datetimeType, dest='fromdate')
getstatus_parser.add_argument('--count', type=int)
getstatus_parser.set_defaults(func=getstatus)

addoutput_parser = subparsers.add_parser(
    'add-output',
    help='Add a daily output to pvoutput.org')
addoutput_parser.add_argument('sid', type=sidType, help="system id")
addoutput_parser.add_argument('fordate', type=dateType)
addoutput_parser.add_argument('--generated', type=int,
                              help="delta production for day")
addoutput_parser.set_defaults(func=addoutput)

args = parser.parse_args()
args.func(args)

sys.exit(0)

config = smadata2.config.SMAData2Config()
db = config.database()

for system in config.systems():
    mypvoutput = config.pvoutput_connect(system)
    uploader = smadata2.pvoutputuploader.PVOutputUploader(db, system, mypvoutput)
    uploader.setVerbose(1)

    # stuff below this line is useful for fixing data on the server - and
    # working out what needs fixing....
    if False:
        print("Showing production datapoints for %s" % system)
        uploader.show_production_for_datapoint("20141029", "19:15")
        uploader.show_production_for_datapoint("20141029", "19:20")
        uploader.show_production_for_datapoint("20141029", "19:25")
        uploader.show_production_for_datapoint("20141029", "19:30")
        uploader.show_production_for_datapoint("20141030", "06:30")
        uploader.show_production_for_datapoint("20141030", "06:35")
        uploader.show_production_for_datapoint("20141030", "06:40")

    if False:
        somedate = "20141031"
        print("reconciling data for system=%s date=%s" % (system, somedate))
        pvodate = mypvoutput.parse_date_and_time(somedate, '00:00')
        uploader.reconcile_date(pvodate)

    if False:
        somedate = "20141031"
        print("uploading data for date=%s system=%s" % (system, somedate))
        pvodate = mypvoutput.parse_date_and_time(somedate, '00:00')
        uploader.upload_statuses_for_day(pvodate)

    if False:
        print("reconciling all data for system %s" % (system))
        uploader.reconcile()

    if False:
        # untested:
        date = "20141104"
        fix = True
        print("doing date %s" % (system))
        uploader.do_date(date, fix)

sys.exit(0)
